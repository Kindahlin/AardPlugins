<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, January 17, 2025, 4:13 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Transcendence_Positional_Scanner" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Transcendence_Positional_Scanner"
   author="Seekers"
   id="f03df00d6130c21176180dc9"
   language="Lua"
   purpose="Generate TPS Reports"
   save_state="y"
   date_written="2025-01-17 15:59:20"
   requires="5.07"
   version="1.3"
   >
</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   group="tps"
   match="^(?:(?<dist>\d) )?(?<dir>North|East|South|West|Up|Down) from here you see:$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="parse_directions"
  >
  </trigger>
  <trigger
   group="tps"
   match="^     - (?<entity>.*)$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="parse_entities"
  >
  </trigger>
  <trigger
   enabled="y"
   match="{/tps_scan}"
   omit_from_output="y"
   send_to="12"
   sequence="100"
   script="end_scan"
  >
  </trigger>
  <trigger
   match="^(\|| |\+).{44}$"
   regexp="y"
   omit_from_output="n"
   send_to="12"
   sequence="100"
   script="parse_map_line"
   group="tps_map"
  >
  </trigger>
  <trigger
   enabled="y"
   match="{tps_scan}"
   omit_from_output="y"
   send_to="12"
   sequence="100"
   script="start_scan"
  >
  </trigger>
  <trigger
   enabled="y"
   match="{/tps_map}"
   omit_from_output="y"
   send_to="12"
   sequence="100"
   script="end_map"
  >
  </trigger>
  <trigger
   enabled="y"
   match="{tps_map}"
   omit_from_output="y"
   send_to="12"
   sequence="100"
   script="start_map"
  >
  </trigger>
  <trigger
   group="tps"
   match="^Right here you see:$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="scan_here"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="tps"
   enabled="y"
   send_to="12"
   sequence="100"
   script="tps_command"
   echo_alias="y"
  >
  </alias>
  <alias
   match="^tps (?<chan>.*)$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
   script="tps_command"
   echo_alias="y"
  >
  </alias>
  <alias
   match="^tps-test$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
   script="echo_test_map_data"
   echo_alias="y"
  >
  </alias>
  <alias
   match="^tps-map$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
   script="get_map_data"
   echo_alias="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[

require "gmcphelper"
require "aardwolf_colors"

local report = {}
local target_room = nil
-- Scan match followed by group output name
-- Can add colors etc in output
local interesting_entities = {
  { "scout", "Scout" },
  { "colossal", "Cherub" },
  { "Executioner", "Exec" }
}

local results = {}
local channel = nil
local map_lines = {}
local map_start = 47684
local map_columns = 11
local map_rows = 11
local map_rooms = {}

function get_current_room_id()
  return gmcp("room.info.num")
  --return "47678"
end

function parse_entities(name, line, wildcard)
  if target_room == nil then
    return
  end

  local entity = wildcard["entity"]

  for i=1,#interesting_entities,1 do
	if string.find(entity, interesting_entities[i][1]) then
	  if results[target_room] == nil then
		results[target_room] = {}
	  end
	  table.insert(results[target_room], get_entity_short_name(entity))
	end
  end
end

function get_entity_short_name(entity)
  for i=1,#interesting_entities,1 do
	if string.find(entity, interesting_entities[i][1]) then
	  return interesting_entities[i][2]
	end
  end
end

function scan_here(name, line, wildcard)
  target_room = get_current_room_id()
end

function display_help()
  AnsiNote( ColoursToANSI( "@x038================================================================================" ) )
  AnsiNote( ColoursToANSI( "@x038=                     @WTranscendence Positional Scanner v1.3@x038                    =" ) )
  AnsiNote( ColoursToANSI( "@x038================================================================================" ) )
  AnsiNote( ColoursToANSI( "@x038= @WPhase 1@x038                                                                      =" ) )
  AnsiNote( ColoursToANSI( "@x038=                                                                              =" ) )
  AnsiNote( ColoursToANSI( "@x038= @Wtps <channel>@x038                                                                =" ) )
  AnsiNote( ColoursToANSI( "@x038= @C- Use when in combat to report your target's HP and directions from center@x038   =" ) )
  AnsiNote( ColoursToANSI( "@x038= @C- Use when out of combat as leader to report locations of nearby targets@x038     =" ) )
  AnsiNote( ColoursToANSI( "@x038=                                                                              =" ) )
  AnsiNote( ColoursToANSI( "@x038= @WPhase 2@x038                                                                      =" ) )
  AnsiNote( ColoursToANSI( "@x038=                                                                              =" ) )
  AnsiNote( ColoursToANSI( "@x038= @Wtps-map@x038                                                                      =" ) )
  AnsiNote( ColoursToANSI( "@x038= @C- Use in the map room to load map data                                    @x038   =" ) )
  AnsiNote( ColoursToANSI( "@x038= @Wtps <channel>@x038                                                                =" ) )
  AnsiNote( ColoursToANSI( "@x038= @C- Use when in combat to report your target's HP and directions from map room@x038 =" ) )
  AnsiNote( ColoursToANSI( "@x038================================================================================" ) )
end

function tps_command(name, line, wildcard)
  local in_combat = gmcp("char.status.state") == "8"
  local is_leader = gmcp("group.leader") == gmcp("char.base.name")
  local in_phase_1 = rooms[get_current_room_id()] ~= nil

  if wildcard["chan"] ~= nil then
    if wildcard["chan"] == "help" then
	  display_help()
	  return
	end
    channel = wildcard["chan"]
  else
    channel = "gt"
  end

  if in_combat then
    report_target_info()
  elseif is_leader and in_phase_1 then
  	SendNoEcho("echo {tps_scan}")
	SendNoEcho("scan")
	SendNoEcho("echo {/tps_scan}")
  else
    Note("You must be the group leader in phase 1 or in combat to generate a TPS report.")
  end
end

function report_target_info()
  local status = gmcp("char.status")
  local target = status.enemy
  local percent = status.enemypct
  local in_phase_1 = rooms[get_current_room_id()] ~= nil
  local in_phase_2 = map_rooms ~= nil and map_rooms[tonumber(get_current_room_id())] ~= nil

  if not in_phase_1 and not in_phase_2 then
  	SendNoEcho(channel .. " @M(@YTPS@M)@w:@W '" .. target .. " @R(@W" .. percent .. "%@R)@w - #" .. get_current_room_id())
  elseif in_phase_1 then
    SendNoEcho(channel .. " @M(@YTPS@M)@w:@W '" .. target .. " @W" .. percent .. "% - @R(@W" .. rooms[get_current_room_id()]["from_center"] .. "@R)@w - #" .. get_current_room_id())
  else
    local path = find_path(47806, tonumber(get_current_room_id()))
    SendNoEcho(channel .. " @M(@YTPS@M)@w:@W '" .. target .. " @W" .. percent .. "% - @R(@W" .. path .. "@R)@w - #" .. get_current_room_id())
  end
end

function start_scan()
  EnableTriggerGroup("tps", 1)
end

function end_scan()
  EnableTriggerGroup("tps", 0)
  -- Concatenate the results into a string for output
  local output = ""
  for key, value in pairs(results) do
    output = output .."@Y(@W"
	for i=1,#value,1 do
	  output = output .. value[i] .. ", "
	end
  	output = output .."@G" .. rooms[key]["from_center"] .. "@Y)@W, "
  end
  -- Trim the trailing comma and space
  output = string.sub(output, 1, -3)
  SendNoEcho(channel .. " @M(@YTPS@M)$C " .. output) 
  -- Clear the results
  results = {}
end

function parse_directions(name, line, wildcard)
  local dist = wildcard["dist"] or ""
  local dir = wildcard["dir"]
  if dist == "" then dist = "1" end
  target_room = get_room(dist, dir)
end

function get_room(num, dir)
  local room_id = get_current_room_id()
  for i=1,num,1 do
    check_id = rooms[room_id][string.sub(dir, 1, 1):lower()]
	if check_id == nil then
	  return nil
	end
    room_id = rooms[room_id][string.sub(dir, 1, 1):lower()]
  end
  return room_id
end

rooms = {
    ["47680"]= { ["n"]= "47683", ["e"]= "47679", ["s"]= "47656", ["w"]= "47668", ["u"]= "47666", ["d"]= "47670", ["from_center"]= "4n4w", ["to_center"]= "4s4e" },
    ["47656"]= { ["n"]= "47680", ["e"]= "47633", ["s"]= "47657", ["w"]= "47672", ["u"]= "47658", ["d"]= "47662", ["from_center"]= "3n4w", ["to_center"]= "3s4e" },
    ["47657"]= { ["n"]= "47656", ["e"]= "47632", ["s"]= "47658", ["w"]= "47681", ["u"]= "47659", ["d"]= "47663", ["from_center"]= "2n4w", ["to_center"]= "2s4e" },
    ["47658"]= { ["n"]= "47657", ["e"]= "47631", ["s"]= "47655", ["w"]= "47653", ["u"]= "47676", ["d"]= "47656", ["from_center"]= "n4w", ["to_center"]= "s4e" },
    ["47655"]= { ["n"]= "47658", ["e"]= "47615", ["s"]= "47659", ["w"]= "47669", ["u"]= "47663", ["d"]= "47653", ["from_center"]= "4w", ["to_center"]= "4e" },
    ["47659"]= { ["n"]= "47655", ["e"]= "47649", ["s"]= "47660", ["w"]= "47683", ["u"]= "47682", ["d"]= "47657", ["from_center"]= "s4w", ["to_center"]= "n4e" },
    ["47660"]= { ["n"]= "47659", ["e"]= "47650", ["s"]= "47661", ["w"]= "47671", ["u"]= "47678", ["d"]= "47669", ["from_center"]= "2s4w", ["to_center"]= "2n4e" },
    ["47661"]= { ["n"]= "47660", ["e"]= "47651", ["s"]= "47682", ["w"]= "47673", ["u"]= "47652", ["d"]= "47664", ["from_center"]= "3s4w", ["to_center"]= "3n4e" },
    ["47682"]= { ["n"]= "47661", ["e"]= "47662", ["s"]= "47677", ["w"]= "47670", ["u"]= "47681", ["d"]= "47659", ["from_center"]= "4s4w", ["to_center"]= "4n4e" },
    ["47679"]= { ["n"]= "47667", ["e"]= "47678", ["s"]= "47633", ["w"]= "47680", ["u"]= "47664", ["d"]= "47652", ["from_center"]= "4n3w", ["to_center"]= "4s3e" },
    ["47633"]= { ["n"]= "47679", ["e"]= "47630", ["s"]= "47632", ["w"]= "47656", ["from_center"]= "3n3w", ["to_center"]= "3s3e" },
    ["47632"]= { ["n"]= "47633", ["e"]= "47629", ["s"]= "47631", ["w"]= "47657", ["from_center"]= "2n3w", ["to_center"]= "2s3e" },
    ["47631"]= { ["n"]= "47632", ["e"]= "47628", ["s"]= "47615", ["w"]= "47658", ["from_center"]= "n3w", ["to_center"]= "s3e" },
    ["47615"]= { ["n"]= "47631", ["e"]= "47614", ["s"]= "47649", ["w"]= "47655", ["from_center"]= "3w", ["to_center"]= "3e" },
    ["47649"]= { ["n"]= "47615", ["e"]= "47646", ["s"]= "47650", ["w"]= "47659", ["from_center"]= "s3w", ["to_center"]= "n3e" },
    ["47650"]= { ["n"]= "47649", ["e"]= "47647", ["s"]= "47651", ["w"]= "47660", ["from_center"]= "2s3w", ["to_center"]= "2n3e" },
    ["47651"]= { ["n"]= "47650", ["e"]= "47648", ["s"]= "47662", ["w"]= "47661", ["from_center"]= "3s3w", ["to_center"]= "3n3e" },
    ["47662"]= { ["n"]= "47651", ["e"]= "47663", ["s"]= "47675", ["w"]= "47682", ["u"]= "47656", ["d"]= "47654", ["from_center"]= "4s3w", ["to_center"]= "4n3e" },
    ["47678"]= { ["n"]= "47665", ["e"]= "47677", ["s"]= "47630", ["w"]= "47679", ["u"]= "47670", ["d"]= "47660", ["from_center"]= "4n2w", ["to_center"]= "4s2e" },
    ["47630"]= { ["n"]= "47678", ["e"]= "47627", ["s"]= "47629", ["w"]= "47633", ["from_center"]= "3n2w", ["to_center"]= "3s2e" },
    ["47629"]= { ["n"]= "47630", ["e"]= "47626", ["s"]= "47628", ["w"]= "47632", ["from_center"]= "2n2w", ["to_center"]= "2s2e" },
    ["47628"]= { ["n"]= "47629", ["e"]= "47625", ["s"]= "47614", ["w"]= "47631", ["from_center"]= "n2w", ["to_center"]= "s2e" },
    ["47614"]= { ["n"]= "47628", ["e"]= "47613", ["s"]= "47646", ["w"]= "47615", ["from_center"]= "2w", ["to_center"]= "2e" },
    ["47646"]= { ["n"]= "47614", ["e"]= "47643", ["s"]= "47647", ["w"]= "47649", ["from_center"]= "s2w", ["to_center"]= "n2e" },
    ["47647"]= { ["n"]= "47646", ["e"]= "47644", ["s"]= "47648", ["w"]= "47650", ["from_center"]= "2s2w", ["to_center"]= "2n2e" },
    ["47648"]= { ["n"]= "47647", ["e"]= "47645", ["s"]= "47663", ["w"]= "47651", ["from_center"]= "3s2w", ["to_center"]= "3n2e" },
    ["47663"]= { ["n"]= "47648", ["e"]= "47664", ["s"]= "47674", ["w"]= "47662", ["u"]= "47657", ["d"]= "47655", ["from_center"]= "4s2w", ["to_center"]= "4n2e" },
    ["47677"]= { ["n"]= "47682", ["e"]= "47654", ["s"]= "47627", ["w"]= "47678", ["u"]= "47669", ["d"]= "47673", ["from_center"]= "4nw", ["to_center"]= "4se" },
    ["47627"]= { ["n"]= "47677", ["e"]= "47612", ["s"]= "47626", ["w"]= "47630", ["from_center"]= "3nw", ["to_center"]= "3se" },
    ["47626"]= { ["n"]= "47627", ["e"]= "47611", ["s"]= "47625", ["w"]= "47629", ["from_center"]= "2nw", ["to_center"]= "2se" },
    ["47625"]= { ["n"]= "47626", ["e"]= "47610", ["s"]= "47613", ["w"]= "47628", ["from_center"]= "nw", ["to_center"]= "se" },
    ["47613"]= { ["n"]= "47625", ["e"]= "47603", ["s"]= "47643", ["w"]= "47614", ["from_center"]= "w", ["to_center"]= "e" },
    ["47643"]= { ["n"]= "47613", ["e"]= "47607", ["s"]= "47644", ["w"]= "47646", ["from_center"]= "sw", ["to_center"]= "ne" },
    ["47644"]= { ["n"]= "47643", ["e"]= "47608", ["s"]= "47645", ["w"]= "47647", ["from_center"]= "2sw", ["to_center"]= "2ne" },
    ["47645"]= { ["n"]= "47644", ["e"]= "47609", ["s"]= "47664", ["w"]= "47648", ["from_center"]= "3sw", ["to_center"]= "3ne" },
    ["47664"]= { ["n"]= "47645", ["e"]= "47652", ["s"]= "47681", ["w"]= "47663", ["u"]= "47661", ["d"]= "47679", ["from_center"]= "4sw", ["to_center"]= "4ne" },
    ["47654"]= { ["n"]= "47652", ["e"]= "47676", ["s"]= "47612", ["w"]= "47677", ["u"]= "47662", ["d"]= "47676", ["from_center"]= "4n", ["to_center"]= "4s" },
    ["47612"]= { ["n"]= "47654", ["e"]= "47618", ["s"]= "47611", ["w"]= "47627", ["from_center"]= "3n", ["to_center"]= "3s" },
    ["47611"]= { ["n"]= "47612", ["e"]= "47617", ["s"]= "47610", ["w"]= "47626", ["from_center"]= "2n", ["to_center"]= "2s" },
    ["47610"]= { ["n"]= "47611", ["e"]= "47616", ["s"]= "47603", ["w"]= "47625", ["from_center"]= "n", ["to_center"]= "s" },
    ["47603"]= { ["n"]= "47610", ["e"]= "47604", ["s"]= "47607", ["w"]= "47613", ["from_center"]= "center", ["to_center"]= "center" },
    ["47607"]= { ["n"]= "47603", ["e"]= "47634", ["s"]= "47608", ["w"]= "47643", ["from_center"]= "s", ["to_center"]= "n" },
    ["47608"]= { ["n"]= "47607", ["e"]= "47635", ["s"]= "47609", ["w"]= "47644", ["from_center"]= "2s", ["to_center"]= "2n" },
    ["47609"]= { ["n"]= "47608", ["e"]= "47636", ["s"]= "47652", ["w"]= "47645", ["from_center"]= "3s", ["to_center"]= "3n" },
    ["47652"]= { ["n"]= "47609", ["e"]= "47665", ["s"]= "47654", ["w"]= "47664", ["u"]= "47679", ["d"]= "47661", ["from_center"]= "4s", ["to_center"]= "4n" },
    ["47676"]= { ["n"]= "47666", ["e"]= "47675", ["s"]= "47618", ["w"]= "47654", ["u"]= "47654", ["d"]= "47658", ["from_center"]= "4ne", ["to_center"]= "4sw" },
    ["47618"]= { ["n"]= "47676", ["e"]= "47621", ["s"]= "47617", ["w"]= "47612", ["from_center"]= "3ne", ["to_center"]= "3sw" },
    ["47617"]= { ["n"]= "47618", ["e"]= "47620", ["s"]= "47616", ["w"]= "47611", ["from_center"]= "2ne", ["to_center"]= "2sw" },
    ["47616"]= { ["n"]= "47617", ["e"]= "47619", ["s"]= "47604", ["w"]= "47610", ["from_center"]= "ne", ["to_center"]= "sw" },
    ["47604"]= { ["n"]= "47616", ["e"]= "47605", ["s"]= "47634", ["w"]= "47603", ["from_center"]= "e", ["to_center"]= "w" },
    ["47634"]= { ["n"]= "47604", ["e"]= "47637", ["s"]= "47635", ["w"]= "47607", ["from_center"]= "se", ["to_center"]= "nw" },
    ["47635"]= { ["n"]= "47634", ["e"]= "47638", ["s"]= "47636", ["w"]= "47608", ["from_center"]= "2se", ["to_center"]= "2nw" },
    ["47636"]= { ["n"]= "47635", ["e"]= "47639", ["s"]= "47665", ["w"]= "47609", ["from_center"]= "3se", ["to_center"]= "3nw" },
    ["47665"]= { ["n"]= "47636", ["e"]= "47666", ["s"]= "47678", ["w"]= "47652", ["u"]= "47683", ["d"]= "47671", ["from_center"]= "4se", ["to_center"]= "4nw" },
    ["47675"]= { ["n"]= "47662", ["e"]= "47674", ["s"]= "47621", ["w"]= "47676", ["u"]= "47672", ["d"]= "47668", ["from_center"]= "4n2e", ["to_center"]= "4s2w" },
    ["47621"]= { ["n"]= "47675", ["e"]= "47624", ["s"]= "47620", ["w"]= "47618", ["from_center"]= "3n2e", ["to_center"]= "3s2w" },
    ["47620"]= { ["n"]= "47621", ["e"]= "47623", ["s"]= "47619", ["w"]= "47617", ["from_center"]= "2n2e", ["to_center"]= "2s2w" },
    ["47619"]= { ["n"]= "47620", ["e"]= "47622", ["s"]= "47605", ["w"]= "47616", ["from_center"]= "n2e", ["to_center"]= "s2w" },
    ["47605"]= { ["n"]= "47619", ["e"]= "47606", ["s"]= "47637", ["w"]= "47604", ["from_center"]= "2e", ["to_center"]= "2w" },
    ["47637"]= { ["n"]= "47605", ["e"]= "47640", ["s"]= "47638", ["w"]= "47634", ["from_center"]= "s2e", ["to_center"]= "n2w" },
    ["47638"]= { ["n"]= "47637", ["e"]= "47641", ["s"]= "47639", ["w"]= "47635", ["from_center"]= "2s2e", ["to_center"]= "2n2w" },
    ["47639"]= { ["n"]= "47638", ["e"]= "47642", ["s"]= "47666", ["w"]= "47636", ["from_center"]= "3s2e", ["to_center"]= "3n2w" },
    ["47666"]= { ["n"]= "47639", ["e"]= "47667", ["s"]= "47676", ["w"]= "47665", ["u"]= "47667", ["d"]= "47680", ["from_center"]= "4s2e", ["to_center"]= "4n2w" },
    ["47674"]= { ["n"]= "47663", ["e"]= "47681", ["s"]= "47624", ["w"]= "47675", ["u"]= "47668", ["d"]= "47667", ["from_center"]= "4n3e", ["to_center"]= "4s3w" },
    ["47624"]= { ["n"]= "47674", ["e"]= "47673", ["s"]= "47623", ["w"]= "47621", ["from_center"]= "3n3e", ["to_center"]= "3s3w" },
    ["47623"]= { ["n"]= "47624", ["e"]= "47672", ["s"]= "47622", ["w"]= "47620", ["from_center"]= "2n3e", ["to_center"]= "2s3w" },
    ["47622"]= { ["n"]= "47623", ["e"]= "47671", ["s"]= "47606", ["w"]= "47619", ["from_center"]= "n3e", ["to_center"]= "s3w" },
    ["47606"]= { ["n"]= "47622", ["e"]= "47653", ["s"]= "47640", ["w"]= "47605", ["from_center"]= "3e", ["to_center"]= "3w" },
    ["47640"]= { ["n"]= "47606", ["e"]= "47670", ["s"]= "47641", ["w"]= "47637", ["from_center"]= "s3e", ["to_center"]= "n3w" },
    ["47641"]= { ["n"]= "47640", ["e"]= "47669", ["s"]= "47642", ["w"]= "47638", ["from_center"]= "2s3e", ["to_center"]= "2n3w" },
    ["47642"]= { ["n"]= "47641", ["e"]= "47668", ["s"]= "47667", ["w"]= "47639", ["from_center"]= "3s3e", ["to_center"]= "3n3w" },
    ["47667"]= { ["n"]= "47642", ["e"]= "47683", ["s"]= "47679", ["w"]= "47666", ["u"]= "47674", ["d"]= "47666", ["from_center"]= "4s3e", ["to_center"]= "4n3w" },
    ["47681"]= { ["n"]= "47664", ["e"]= "47657", ["s"]= "47673", ["w"]= "47674", ["u"]= "47673", ["d"]= "47682", ["from_center"]= "4n4e", ["to_center"]= "4s4w" },
    ["47673"]= { ["n"]= "47681", ["e"]= "47661", ["s"]= "47672", ["w"]= "47624", ["u"]= "47677", ["d"]= "47681", ["from_center"]= "3n4e", ["to_center"]= "3s4w" },
    ["47672"]= { ["n"]= "47673", ["e"]= "47656", ["s"]= "47671", ["w"]= "47623", ["u"]= "47671", ["d"]= "47675", ["from_center"]= "2n4e", ["to_center"]= "2s4w" },
    ["47671"]= { ["n"]= "47672", ["e"]= "47660", ["s"]= "47653", ["w"]= "47622", ["u"]= "47665", ["d"]= "47672", ["from_center"]= "n4e", ["to_center"]= "s4w" },
    ["47653"]= { ["n"]= "47671", ["e"]= "47658", ["s"]= "47670", ["w"]= "47606", ["u"]= "47655", ["d"]= "47683", ["from_center"]= "4e", ["to_center"]= "4w" },
    ["47670"]= { ["n"]= "47653", ["e"]= "47682", ["s"]= "47669", ["w"]= "47640", ["u"]= "47680", ["d"]= "47678", ["from_center"]= "s4e", ["to_center"]= "n4w" },
    ["47669"]= { ["n"]= "47670", ["e"]= "47655", ["s"]= "47668", ["w"]= "47641", ["u"]= "47660", ["d"]= "47677", ["from_center"]= "2s4e", ["to_center"]= "2n4w" },
    ["47668"]= { ["n"]= "47669", ["e"]= "47680", ["s"]= "47683", ["w"]= "47642", ["u"]= "47675", ["d"]= "47674", ["from_center"]= "3s4e", ["to_center"]= "3n4w" },
    ["47683"]= { ["n"]= "47668", ["e"]= "47659", ["s"]= "47680", ["w"]= "47667", ["u"]= "47653", ["d"]= "47665", ["from_center"]= "4s4e", ["to_center"]= "4n4w" },
}

function reset_map()
  map_rooms = {}
  for x=1,map_columns,1 do
    for y=1,map_rows,1 do
	  local room_id = map_coords_to_room_id(x, y)
	  map_rooms[room_id] = {}
	  if x > 1 then
	    map_rooms[room_id]["w"] = map_coords_to_room_id(x-1, y)
	  else
	    map_rooms[room_id]["w"] = map_coords_to_room_id(map_columns, y)
	  end
	  if x < map_columns then
	    map_rooms[room_id]["e"] = map_coords_to_room_id(x+1, y)
	  else
	    map_rooms[room_id]["e"] = map_coords_to_room_id(1, y)
	  end
	  if y > 1 then
	    map_rooms[room_id]["n"] = map_coords_to_room_id(x, y-1)
	  else
	    map_rooms[room_id]["n"] = map_coords_to_room_id(x, map_rows)
	  end
	  if y < map_rows then
	    map_rooms[room_id]["s"] = map_coords_to_room_id(x, y+1)
	  else
	    map_rooms[room_id]["s"] = map_coords_to_room_id(x, 1)
	  end
	end
  end
  map_rooms[47806] = { ["n"]= 47711, ["e"]= 47747, ["s"]= 47777, ["w"]= 47741 }
end

function map_coords_to_room_id(x, y)
  return map_start + (x-1) + ((y-1) * map_columns)
end

function map_room_id_to_coords(room_id)
  local x = (room_id - map_start) % map_columns
  local y = math.floor((room_id - map_start) / map_columns)
  return x, y
end

function echo_test_map_data()
  SendNoEcho("compact")
  SendNoEcho("prompt")
  SendNoEcho("echo {tps_map}")
  SendNoEcho("echo It is difficult to make out much of anything in the darkness...")
  SendNoEcho("echo +---+---+---+---+---+---+   +   +---+---+   +")
  SendNoEcho("echo |       |       |       |                   |")
  SendNoEcho("echo +   +   +   +   +   +---+   +---+---+---+   +")
  SendNoEcho("echo |   |       |   |   |           |       |   |")
  SendNoEcho("echo +   +---+   +   +   ^   ^---+---+   +   +   +")
  SendNoEcho("echo |       |       |           |       |   |   |")
  SendNoEcho("echo +---+   +   +   +---^   ^---+   +---+   +   +")
  SendNoEcho("echo |       |   |       |   |           |   |   |")
  SendNoEcho("echo +   +---+   +---+   +---+   +---+---+   +   +")
  SendNoEcho("echo @w        |       |   |       |   |       |### ")
  SendNoEcho("echo +   +   <---<   +   +   +---+   >   >---+   +")
  SendNoEcho("echo |   |       |                   |   |       |")
  SendNoEcho("echo +   +   <   <   +   +---+   +--->   >---+   +")
  SendNoEcho("echo @w        |   |   |       |           |        ")
  SendNoEcho("echo +   +---+---+   +   +   +---+---+   +   +   +")
  SendNoEcho("echo |   |       |   |   |                       |")
  SendNoEcho("echo +   +   +   +   +---v   v   +---+   +---+---+")
  SendNoEcho("echo |       |   |   |       |       |           |")
  SendNoEcho("echo +   +---+   +   +   v   v   +---+---+---+   +")
  SendNoEcho("echo |   |       |       |   |                   |")
  SendNoEcho("echo +   +   +---+---+---+   +---+   +---+---+   +")
  SendNoEcho("echo @w    |                           |            ")
  SendNoEcho("echo +---+---+---+---+---+---+   +   +---+---+   +")
  SendNoEcho("echo {/tps_map}")
  SendNoEcho("compact")
  SendNoEcho("prompt")
end

function get_map_data()
  SendNoEcho("echo {tps_map}")
  SendNoEcho("map")
  SendNoEcho("echo {/tps_map}")
end

function start_map()
  map_lines = {}
  reset_map()
  EnableTriggerGroup("tps_map", 1)
end

function end_map()
  EnableTriggerGroup("tps_map", 0)
  -- If we didn't get any map_lines cancel out
  if #map_lines == 0 then
    Note("Got no map data")
	return
  end
  parse_map_lines()
  if #map_lines == 23 then
	Note("Got full map data")
  end
  -- display_map_rooms_data()
end

function parse_map_line(name, line, wildcard)
  table.insert(map_lines, line)
end

function parse_map_lines()
  local offset = 4
  local oddStart = 3
  local oddEnd = 43
  local evenStart = 1
  local evenEnd = 41

  for i=1,22,1 do 
    local even = i % 2 == 0
    local x = 1
    if not even then
      for j=oddStart,oddEnd,offset do
        if string.sub(map_lines[i], j, j) == '-' then
          remove_ns_exits(x,i)
        end
        x = x + 1
      end
    else
      for k=evenStart,evenEnd,offset do
        if string.sub(map_lines[i], k, k) == '|' then
          remove_ew_exits(x,i)
        end
        x = x + 1
      end
    end
  end
end

function remove_ns_exits(x, y)
  -- y will always be odd so we'll convert it to a row
  local row = math.floor((y+1)/2)
  -- 1,1 would be above the north exit of the first room and south of 1,11
  local first_room_id = map_coords_to_room_id(x, row)
  if row-1 < 1 then
	row = 11
  else
	row = row-1
  end
  local second_room_id = map_coords_to_room_id(x, row)
  map_rooms[first_room_id]["n"] = nil
  map_rooms[second_room_id]["s"] = nil
end

function remove_ew_exits(x, y)
  -- y will always be even so we'll convert it to a row
  local row = y/2
  -- 1,1 would be to the left of the west exit of the first room and to the right of 11,1
  local first_room_id = map_coords_to_room_id(x, row)
  if x-1 < 1 then
    x = 11
  else
    x = x-1
  end
  local second_room_id = map_coords_to_room_id(x, row)
  map_rooms[first_room_id]["w"] = nil
  map_rooms[second_room_id]["e"] = nil
end

function display_map_rooms_data()
  for key, value in pairs(map_rooms) do
	local x, y = map_room_id_to_coords(key)
	local exits = ""
	if value["n"] ~= nil then
	  exits = exits .. "n"
	end
	if value["e"] ~= nil then
	  exits = exits .. "e"
	end
	if value["s"] ~= nil then
	  exits = exits .. "s"
	end
	if value["w"] ~= nil then
	  exits = exits .. "w"
	end
	Note("Room " .. key .. " at " .. x .. "," .. y .. " has exits: " .. exits)
  end
end

-- Find the shortest path from one room to another
-- Using A* Pathfinding
-- The key value pairs in map_rooms indicate the exits from a room to another room
-- Output a final list of exits that lead from one room to another
function find_path(from, to)
  local open = {}
  local closed = {}
  local came_from = {}
  local g_score = {}
  local f_score = {}
  local current = from

  g_score[from] = 0
  f_score[from] = heuristic_cost_estimate(from, to)

  table.insert(open, from)

  while #open > 0 do
	current = get_lowest_f_score(open, f_score)
	if current == to then
	  return reconstruct_path(came_from, current)
	end

	table.remove(open, get_index(open, current))
	table.insert(closed, current)

	for key, value in pairs(map_rooms[current]) do
	  if value == nil then
	    goto continue
	  end
	  if tableContains(closed, value) then
	    goto continue
	  end

	  local tentative_g_score = g_score[current] + 1
	  if not tableContains(open, value) then
	    table.insert(open, value)
	  elseif tentative_g_score >= g_score[value] then
	    goto continue
	  end

	  came_from[value] = current
	  g_score[value] = tentative_g_score
	  f_score[value] = g_score[value] + heuristic_cost_estimate(value, to)

	  ::continue::
	end
  end
end

function heuristic_cost_estimate(from, to)
  local x1, y1 = map_room_id_to_coords(from)
  local x2, y2 = map_room_id_to_coords(to)
  return math.abs(x1 - x2) + math.abs(y1 - y2)
end

function get_lowest_f_score(open, f_score)
  local lowest = nil
  local lowest_score = nil
  for i=1,#open,1 do
	if lowest == nil or f_score[open[i]] < lowest_score then
	  lowest = open[i]
	  lowest_score = f_score[open[i]]
	end
  end
  return lowest
end

function get_index(list, value)
  for i=1,#list,1 do
	if list[i] == value then
	  return i
	end
  end
end

function reconstruct_path(came_from, current)
  local total_path = {current}
  while came_from[current] ~= nil do
	current = came_from[current]
	table.insert(total_path, 1, current)
  end
  -- use map_rooms to determine the exits between rooms in total_path
  local path = {}
  for i=1,#total_path-1,1 do
	local exits = map_rooms[total_path[i]]
	for key, value in pairs(exits) do
	  if value == total_path[i+1] then
		table.insert(path, key)
	  end
	end
  end
  -- If path has duplicate directions in a row, remove the duplicates and put a number in front indicating the number of duplicates
  local i = 1
  local concat_path = ""
  while i < #path do
    local count = 1
    while path[i] == path[i+1] do
	  count = count + 1
	  i = i + 1
	  if i == #path then
	  	break
	  end
	end
	if count > 1 then
	  concat_path = concat_path .. count .. path[i]
	else
	  concat_path = concat_path .. path[i]
	end
	i = i + 1
  end
  return concat_path
end

function tableContains(table, element)
  for _, value in pairs(table) do
	if value == element then
	  return true
	end
  end
  return false
end

]]>
</script>

</muclient>
